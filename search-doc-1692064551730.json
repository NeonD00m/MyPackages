[{"title":"Throttle","type":0,"sectionRef":"#","url":"/MyPackages/api/Throttle","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Throttle","url":"/MyPackages/api/Throttle#functions","content":" "},{"title":"Throttle()​","type":1,"pageTitle":"Throttle","url":"/MyPackages/api/Throttle#__call","content":"&lt;/&gt; Throttle(timeOrName:: number | string,time: number?) → boolean Returns true based on if it has been 'time' since the last success. caution Throttles are saved based on the file name and file line they are called at by default, include an identifier to use the same throttle in multiple places a shown below: while task.wait(0.1) do --a loop of some sort or maybe in an event if Throttle(3) then print(&quot;3 seconds have passed&quot;) end end --Or if you want to use the same debounce/cooldown in multiple places: Throttle(&quot;someUniqueIdentifier&quot;, 3)  "},{"title":"EventReader","type":0,"sectionRef":"#","url":"/MyPackages/api/EventReader","content":"On this page EventReader A small system for using events in some other loop/event. Type: () -&gt; ( () -&gt; () -&gt; (number, ...any), (...any) -&gt; nil ) Example code: local read, onEvent = EventReader() someRemoteEventOrLibrary:Connect(onEvent) while task.wait(1) do for i, argument1, argument2 ... in read() do --do something end end ","keywords":""},{"title":"TypeChecker","type":0,"sectionRef":"#","url":"/MyPackages/api/TypeChecker","content":"On this page TypeChecker tip This should be constructed for each connection or each connection with the same types. Constructs a middleware function with the settings you select. local newChecker = TypeChecker({&quot;string&quot;, &quot;number&quot;}) --Or use it like this: NeoNet:Connect(&quot;SomeEvent&quot;, function() --do something end, TypeChecker{&quot;string&quot;, &quot;number&quot;}) if you want to create your own middleware check out the docs page on it.","keywords":""},{"title":"RateLimiter","type":0,"sectionRef":"#","url":"/MyPackages/api/RateLimiter","content":"On this page RateLimiter tip This should be constructed for each connection. Constructs a middleware function with the settings you select. local newLimiter = Ratelimiter(60, true) --Or use it like this: NeoNet:Connect(&quot;SomeEvent&quot;, function() --do something end, RateLimiter(0.5, true)) --OR if you want to dynamically change the rate use it like this: local limiterInfo = {60, true} NeoNet:Connect(&quot;SomeEvent&quot;, function() --do something end, RateLimiter(limiterInfo)) --later/somewhere else limiterInfo[1] = 30 if you want to create your own middleware check out the docs page on it.","keywords":""},{"title":"Richify","type":0,"sectionRef":"#","url":"/MyPackages/api/Richify","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Richify","url":"/MyPackages/api/Richify#types","content":" "},{"title":"Richify​","type":1,"pageTitle":"Richify","url":"/MyPackages/api/Richify#Richify","content":"&lt;/&gt; type Richify = { string: string, __call: (InputType ) → Richify } The type for the richify object after initializing one with a string.  "},{"title":"Tags​","type":1,"pageTitle":"Richify","url":"/MyPackages/api/Richify#Tags","content":"&lt;/&gt; type Tags = { bold=&quot;b&quot;, italic=&quot;i&quot;, } Just some shortened tag names for ease of use. Example: turns &quot;bold&quot; into the rich text tag &quot;b&quot; here: local boldHelloWorld = richify &quot;hello world&quot; &quot;bold&quot;  "},{"title":"Functions​","type":1,"pageTitle":"Richify","url":"/MyPackages/api/Richify#functions","content":" "},{"title":"Richify()​","type":1,"pageTitle":"Richify","url":"/MyPackages/api/Richify#__call","content":"&lt;/&gt; Richify() → () The initiator/constructor of a Richify object. local result: Richify = richify &quot;hello world&quot;   "},{"title":"Richify()​","type":1,"pageTitle":"Richify","url":"/MyPackages/api/Richify#__call","content":"&lt;/&gt; Richify() → () Richify only has one method which is calling the Richify object. -- \\/ create object local result: string = (richify &quot;hello&quot; &quot;stroke&quot;(Color3.new(1, 0, 0))).string -- /\\ edit stroke with the color of Red local result: Richify = richify(&quot;world&quot;)(&quot;stroke&quot;)(Color3.new(1, 0, 0)) InputType Description Next Parameters {number} (NOT IMPLEMENTED) Edit a section of the string none &quot;color&quot; Edit the color of the section (color: Color3) &quot;size&quot; Edit the font size of the section (size: number) &quot;stroke&quot; Edit the stroke of the section (color: Color3, joins: string, thickness: number, transparency: number) &quot;insert&quot; Insert a string at a specific spot {[1]: number, [2]: string} (any rich text tag or shortened tag) Add a rich text tag to the section none  "},{"title":"Middleware","type":0,"sectionRef":"#","url":"/MyPackages/api/Middleware","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#types","content":" "},{"title":"RemoteClientMiddleware​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#RemoteClientMiddleware","content":"&lt;/&gt; type RemoteClientMiddleware = ( Parameters: {number: any}, ) → ( boolean, {number: any} ) Type for client middleware. See how to create your own middleware here.  "},{"title":"RemoteServerMiddleware​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#RemoteServerMiddleware","content":"&lt;/&gt; type RemoteServerMiddleware = ( Player: Player , Parameters: {number: any} ) → ( boolean, {number: any} ) Type for server middleware. See how to create your own middleware here. "},{"title":"Properties​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#properties","content":" "},{"title":"RateLimiter​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#RateLimiter","content":"&lt;/&gt; Middleware.RateLimiter: RemoteClientMiddleware&amp;RemoteServerMiddleware For access to the built-in RateLimiter.  "},{"title":"TypeChecker​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#TypeChecker","content":"&lt;/&gt; Middleware.TypeChecker: RemoteClientMiddleware&amp;RemoteServerMiddleware For access to the built-in TypeChecker. "},{"title":"Functions​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#functions","content":" "},{"title":"auto​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#auto","content":"&lt;/&gt; Middleware.auto( handler: (...any) → nil, ...: RemoteClientMiddleware | RemoteServerMiddleware ) → () → nil Returns the result of either Middleware.Server or Middleware.Client depending on RunService:IsServer(). Event:Connect(Middleware.auto(someFunc, someMiddleware))   "},{"title":"Server​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#Server","content":"&lt;/&gt; Middleware.Server( handler: ( Player , ...any ) → nil, ...: RemoteServerMiddleware ) → () → nil Returns a function that tests the parameters through the middleware before running the handler. Event:Connect(Middleware.Server(someFunc, someMiddleware))   "},{"title":"Client​","type":1,"pageTitle":"Middleware","url":"/MyPackages/api/Middleware#Client","content":"&lt;/&gt; Middleware.Client( handler: (...any) → nil, ...: RemoteClientMiddleware ) → () → nil Returns a function that tests the parameters through the middleware before running the handler. Event:Connect(Middleware.Client(someFunc, someMiddleware))  "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/MyPackages/docs/intro","content":"","keywords":""},{"title":"Next steps​","type":1,"pageTitle":"Getting Started","url":"/MyPackages/docs/intro#next-steps","content":"You should dive in to the API reference for whatever you're interested in! Documentation will be improved on and added to with time. "},{"title":"Example place","type":0,"sectionRef":"#","url":"/MyPackages/docs/examplePlace","content":"Example place The example place will be public and editable here. This article is just to show the code and explain the small example uses for each module.","keywords":""},{"title":"Bunch","type":0,"sectionRef":"#","url":"/MyPackages/api/Bunch","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#properties","content":" "},{"title":"Element​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#Element","content":"&lt;/&gt; Bunch.Element: Element For access to the Element module. "},{"title":"Functions​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#new","content":"&lt;/&gt; Bunch.new(data: {[any]: T}) → () Creates a new Bunch object from the given set of data. local list = Bunch.new({1, 2, 3, 4, 5})   "},{"title":"isList​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#isList","content":"&lt;/&gt; Bunch:isList() → boolean Returns a boolean describing whether the Bunch object contains at least one of more numeric indexes. local isList = someBunch:isList()   "},{"title":"map​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#map","content":"&lt;/&gt; Bunch:map(operations: Element.Element) → Bunch&lt;T&gt; Returns a new bunch object and uses the operations on each value. local doubled = someBunch:map(Element * 2)   "},{"title":"mapCall​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#mapCall","content":"&lt;/&gt; Bunch:mapCall( func: ( v: T, ...any ) → T, ...: any ) → Bunch&lt;T&gt; Returns a new bunch object and uses the given function on each value. local doubled = someBunch:map(function(v) return v * 2 end)   "},{"title":"filter​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#filter","content":"&lt;/&gt; Bunch:filter(operations: Element.Element) → Bunch&lt;T&gt; Returns a new bunch object that is filtered by the operations given. caution The Element object should return a boolean value at the end. If the value is false or nil, the element will be removed from the Bunch. local evenOnly = someBunch:filter((Element % 2):equals(0)) local moduleScripts = Bunch.new(someInstance:GetChildren()):filter(Element.ClassName:equals(&quot;ModuleScript&quot;))   "},{"title":"remove​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#remove","content":"&lt;/&gt; Bunch:remove(index: any) → T Returns the value at the index after removing it from the bunch object. local removed = someBunch:remove(&quot;someProperty&quot;)   "},{"title":"range​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#range","content":"&lt;/&gt; Bunch:range( from: number, to: number? ) → Bunch&lt;T&gt;? Returns the value at the index after removing it from the bunch object. local first3Values = someBunch:range(1, 3)   "},{"title":"merge​","type":1,"pageTitle":"Bunch","url":"/MyPackages/api/Bunch#merge","content":"&lt;/&gt; Bunch:merge(other: {}) → Bunch&lt;T&gt;? Adds the non-numeric keys of 'other' into a new bunch unless they already exist in the bunch. local mixed = someBunch:merge(anotherTable)  "},{"title":"Custom Middleware","type":0,"sectionRef":"#","url":"/MyPackages/docs/customMiddleware","content":"","keywords":""},{"title":"Admin Check​","type":1,"pageTitle":"Custom Middleware","url":"/MyPackages/docs/customMiddleware#admin-check","content":"For things like an admin panel, you most likely only want your admins to be able to fire the events. Here is some very simple code you might use for this. Also unlike the two built-in middleware options something like this can be reused for multiple connections. return function(player): RemoteServerMiddleware return player:GetRankInGroup(GROUP_ID) &gt;= 250 end  "},{"title":"Squash Library Example​","type":1,"pageTitle":"Custom Middleware","url":"/MyPackages/docs/customMiddleware#squash-library-example","content":"Let's use the Squash library as an example of something you might implement in your own games. In a modulescript we could return this after requiring Sqash and later use this as RemoteServerMiddleware. return function(typesExpected: {string}?): (...any) -&gt; (boolean, {any}) return function(plr, ...) local params = {...} for i, v in params do params[i] = Squash[typesExpected[i]].des(v) end return true, params end end  "},{"title":"Element","type":0,"sectionRef":"#","url":"/MyPackages/api/Element","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#functions","content":" "},{"title":"equals​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#equals","content":"&lt;/&gt; Element:equals(other: any) → Element Replacement for the '==' operator. local evenOnly = someBunch:filter((Element % 2):equals(0))   "},{"title":"lessThan​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#lessThan","content":"&lt;/&gt; Element:lessThan(value: any) → Element Replacement for the '&lt;' operator. local negativeOnly = someBunch:filter(Element:lessThan(0))   "},{"title":"lessThanOrEqualTo​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#lessThanOrEqualTo","content":"&lt;/&gt; Element:lessThanOrEqualTo(value: any) → Element Replacement for the '&lt;=' operator. local negativeOrZero = someBunch:filter(Element:lessThanorEqualTo(0))   "},{"title":"moreThan​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#moreThan","content":"&lt;/&gt; Element:moreThan(value: any) → Element Replacement for the '&gt;' operator. local positiveOnly = someBunch:filter(Element:moreThan(0))   "},{"title":"moreThanOrEqualTo​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#moreThanOrEqualTo","content":"&lt;/&gt; Element:moreThanOrEqualTo(value: any) → Element Replacement for the '&gt;' operator. local positiveOrZero = someBunch:filter(Element:moreThanOrEqualTo(0))   "},{"title":"call​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#call","content":"&lt;/&gt; Element:call( func: () → any, position: number, ...: any ) → Element Stores the operations of calling the specified function on the Element. The position parameter controls what place the Element's value is in the parameters specified after. someBunch:filter(Element:call(print)) someBunch:filter(Element:call(isValid, 2, &quot;something&quot;) --wherethe type looks like isValid: (string, T) -&gt; boolean   "},{"title":"result​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#result","content":"&lt;/&gt; Element:result(x: any) → () Returns the resulting value after completing the operations on it. local doubled = (Element * 2):result(someNumber)   "},{"title":"toCallback​","type":1,"pageTitle":"Element","url":"/MyPackages/api/Element#toCallback","content":"&lt;/&gt; Element:toCallback() → (...any) → any Returns a callback/function that can be called that automatically sends self as the first parameter. local doubled = someThing(Element:moreThan(2):toCallback())  "}]