"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[167],{74913:e=>{e.exports=JSON.parse('{"functions":[{"name":"auto","desc":"Returns the result of either Middleware.Server or Middleware.Client depending on RunService:IsServer().\\n```lua\\nEvent:Connect(Middleware.auto(someFunc, someMiddleware))\\n```","params":[{"name":"handler","desc":"","lua_type":"(...any) -> nil"},{"name":"...","desc":"","lua_type":"RemoteClientMiddleware | RemoteServerMiddleware"}],"returns":[{"desc":"","lua_type":"() -> nil\\r\\n"}],"function_type":"static","source":{"line":57,"path":"src/Middleware/Middleware/init.luau"}},{"name":"Server","desc":"Returns a function that tests the parameters through the middleware before running the handler.\\n```lua\\nEvent:Connect(Middleware.Server(someFunc, someMiddleware))\\n```","params":[{"name":"handler","desc":"","lua_type":"(Player, ...any) -> nil"},{"name":"...","desc":"","lua_type":"RemoteServerMiddleware"}],"returns":[{"desc":"","lua_type":"() -> nil\\r\\n"}],"function_type":"static","source":{"line":68,"path":"src/Middleware/Middleware/init.luau"}},{"name":"Client","desc":"Returns a function that tests the parameters through the middleware before running the handler.\\n```lua\\nEvent:Connect(Middleware.Client(someFunc, someMiddleware))\\n```","params":[{"name":"handler","desc":"","lua_type":"(...any) -> nil"},{"name":"...","desc":"","lua_type":"RemoteClientMiddleware"}],"returns":[{"desc":"","lua_type":"() -> nil\\r\\n"}],"function_type":"static","source":{"line":94,"path":"src/Middleware/Middleware/init.luau"}}],"properties":[{"name":"RateLimiter","desc":"For access to the built-in RateLimiter.","lua_type":"RemoteClientMiddleware & RemoteServerMiddleware","source":{"line":16,"path":"src/Middleware/Middleware/init.luau"}},{"name":"TypeChecker","desc":"For access to the built-in TypeChecker.","lua_type":"RemoteClientMiddleware & RemoteServerMiddleware","source":{"line":23,"path":"src/Middleware/Middleware/init.luau"}}],"types":[{"name":"RemoteClientMiddleware","desc":"Type for client middleware. [See how to create your own middleware here.](/docs/customMiddleware)","lua_type":"(Parameters: {number: any},) -> (boolean, {number: any})","source":{"line":35,"path":"src/Middleware/Middleware/init.luau"}},{"name":"RemoteServerMiddleware","desc":"Type for server middleware. [See how to create your own middleware here.](/docs/customMiddleware)","lua_type":"(Player: Player,Parameters: {number: any}) -> (boolean, {number: any})","source":{"line":45,"path":"src/Middleware/Middleware/init.luau"}}],"name":"Middleware","desc":"A small library for creating middleware that can work anywhere. This was originally from NeoNet but since more advanced networking libraries exist now and\\nmiddleware may be something you want in other circumstances, I decided to turn this into its own package.","source":{"line":7,"path":"src/Middleware/Middleware/init.luau"}}')}}]);