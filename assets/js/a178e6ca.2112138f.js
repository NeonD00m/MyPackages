"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[785],{42889:e=>{e.exports=JSON.parse('{"functions":[{"name":"equals","desc":"Replacement for the \'==\' operator.\\n```lua\\nlocal evenOnly = someBunch:filter((Element % 2):equals(0))\\n```","params":[{"name":"other","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Element\\r\\n"}],"function_type":"method","source":{"line":116,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"lessThan","desc":"Replacement for the \'<\' operator.\\n```lua\\nlocal negativeOnly = someBunch:filter(Element:lessThan(0))\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Element\\r\\n"}],"function_type":"method","source":{"line":134,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"lessThanOrEqualTo","desc":"Replacement for the \'<=\' operator.\\n```lua\\nlocal negativeOrZero = someBunch:filter(Element:lessThanorEqualTo(0))\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Element\\r\\n"}],"function_type":"method","source":{"line":147,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"moreThan","desc":"Replacement for the \'>\' operator.\\n```lua\\nlocal positiveOnly = someBunch:filter(Element:moreThan(0))\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Element\\r\\n"}],"function_type":"method","source":{"line":158,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"moreThanorEqualTo","desc":"Replacement for the \'>\' operator.\\n```lua\\nlocal positiveOrZero = someBunch:filter(Element:moreThanOrEqualTo(0))\\n```","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Element\\r\\n"}],"function_type":"method","source":{"line":175,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"call","desc":"Stores the operations of calling the specified function on the Element.\\nThe position parameter controls what place the Element\'s value is in the parameters specified after.\\n```lua\\nsomeBunch:filter(Element:call(print))\\n\\nsomeBunch:filter(Element:call(isValid, 2, \\"something\\") --wherethe type looks like isValid: (string, T) -> boolean\\n```","params":[{"name":"func","desc":"","lua_type":"() -> any"},{"name":"position","desc":"","lua_type":"number"},{"name":"...","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Element\\r\\n"}],"function_type":"method","source":{"line":199,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"result","desc":"Returns the resulting value after completing the operations on it.\\n```lua\\nlocal doubled = (Element * 2):result(someNumber)\\n```","params":[{"name":"x","desc":"","lua_type":"any"}],"returns":[],"function_type":"method","source":{"line":211,"path":"src/Bunch/Bunch/Element.luau"}},{"name":"toCallback","desc":"Returns a callback/function that can be called .\\n```lua\\nlocal doubled = someThing(Element:moreThan(2):toCallback())\\n```","params":[],"returns":[{"desc":"","lua_type":"(...any) -> any\\r\\n"}],"function_type":"method","source":{"line":265,"path":"src/Bunch/Bunch/Element.luau"}}],"properties":[],"types":[],"name":"Element","desc":"An object to replicate the conciseness of lambda functions even if not all the capabilities are achieved.\\nAn Element object is automatically created when an operator is used on it.","source":{"line":7,"path":"src/Bunch/Bunch/Element.luau"}}')}}]);